import { createClient } from '@supabase/supabase-js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://gidvpxxfgvivjbzfpxcg.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdpZHZweHhmZ3ZpdmpiemZweGNnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgxOTUzNjUsImV4cCI6MjA3Mzc3MTM2NX0.-7bkvxCdCfz49sJcXXhxOxE_DyhDW-bD6xae933oz_g';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testDatabaseConnection() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Supabase...\n');
  
  try {
    // 1. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    const { data: apiTest, error: apiError } = await supabase
      .from('clients')
      .select('count')
      .limit(1);
    
    if (apiError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ API:', apiError.message);
      return;
    }
    console.log('‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ\n');

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...');
    const tables = ['clients', 'profiles', 'user_roles', 'payments', 'payment_receipts'];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);
        
        if (error) {
          console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${error.message}`);
        } else {
          console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
      } catch (err) {
        console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${err.message}`);
      }
    }
    console.log('');

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS –ø–æ–ª–∏—Ç–∏–∫
    console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS –ø–æ–ª–∏—Ç–∏–∫...');
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const { data: clientsData, error: clientsError } = await supabase
        .from('clients')
        .select('*')
        .limit(1);
      
      if (clientsError && clientsError.code === 'PGRST301') {
        console.log('‚úÖ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã (–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)');
      } else {
        console.log('‚ö†Ô∏è RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
      }
    } catch (err) {
      console.log('‚úÖ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã');
    }
    console.log('');

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Storage
    console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Storage...');
    try {
      const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
      
      if (bucketsError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ Storage:', bucketsError.message);
      } else {
        const receiptsBucket = buckets.find(bucket => bucket.name === 'receipts');
        if (receiptsBucket) {
          console.log('‚úÖ Bucket "receipts" —Å–æ–∑–¥–∞–Ω');
        } else {
          console.log('‚ùå Bucket "receipts" –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
      }
    } catch (err) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Storage:', err.message);
    }
    console.log('');

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
    console.log('5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π...');
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é is_admin
      const { data: adminTest, error: adminError } = await supabase
        .rpc('is_admin', { user_uuid: '00000000-0000-0000-0000-000000000000' });
      
      if (adminError) {
        console.log('‚ùå –§—É–Ω–∫—Ü–∏—è is_admin:', adminError.message);
      } else {
        console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è is_admin —Ä–∞–±–æ—Ç–∞–µ—Ç');
      }
    } catch (err) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ—É–Ω–∫—Ü–∏–π:', err.message);
    }
    console.log('');

    // 6. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
    console.log('6Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...');
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      const testClient = {
        full_name: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
        contract_amount: 100000,
        installment_period: 12,
        first_payment: 10000,
        monthly_payment: 8000,
        remaining_amount: 90000,
        user_id: '00000000-0000-0000-0000-000000000000',
        employee_id: '00000000-0000-0000-0000-000000000000'
      };

      const { data: insertData, error: insertError } = await supabase
        .from('clients')
        .insert([testClient])
        .select();

      if (insertError) {
        if (insertError.code === 'PGRST301') {
          console.log('‚úÖ RLS —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤—Å—Ç–∞–≤–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)');
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', insertError.message);
        }
      } else {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', insertData[0].id);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        await supabase
          .from('clients')
          .delete()
          .eq('id', insertData[0].id);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω');
      }
    } catch (err) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', err.message);
    }
    console.log('');

    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ database_migration.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –º–∏–≥—Ä–∞—Ü–∏—é –≤ Supabase Dashboard');
    console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run dev');
    console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testDatabaseConnection();
